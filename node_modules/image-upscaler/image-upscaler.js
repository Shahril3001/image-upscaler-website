"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.upscaleOneImageByScale = upscaleOneImageByScale;
exports.upscaleOneImageByWidth = upscaleOneImageByWidth;
exports.upscaleOneImageByDimension = upscaleOneImageByDimension;
var child_process_1 = require("child_process");
var path_1 = require("path");
var fs_1 = require("fs");
var getCurrentOs = function () {
    var platform = process.platform;
    if (platform === "win32")
        return "window";
    if (platform === "darwin")
        return "mac";
    if (platform === "linux")
        return "linux";
    return "Unknown";
};
var getBinaryPath = function (os) {
    return (0, path_1.resolve)((0, path_1.join)(__dirname, "resources", os, "bin"));
};
var platform = getCurrentOs();
var binariesPath = getBinaryPath(platform);
var execPath = (0, path_1.resolve)((0, path_1.join)(binariesPath, "./upscayl-bin"));
var MODEL_PATH = "../../../resources/models";
var getBatchArguments = function (_a) {
    var inputDir = _a.inputDir, outputDir = _a.outputDir, modelsPath = _a.modelsPath, model = _a.model, gpuId = _a.gpuId, saveImageAs = _a.saveImageAs, scale = _a.scale, customWidth = _a.customWidth, compression = _a.compression, tileSize = _a.tileSize, dimension = _a.dimension;
    return [
        // INPUT IMAGE
        "-i",
        inputDir,
        // OUTPUT IMAGE
        "-o",
        outputDir,
        // OUTPUT SCALE
        scale ? "-s" : "",
        scale ? scale : "",
        // MODELS PATH
        modelsPath ? "-m" : "",
        modelsPath,
        // MODEL NAME
        model ? "-n" : "",
        model,
        // GPU ID
        gpuId ? "-g" : "",
        gpuId ? gpuId : "",
        // FORMAT
        saveImageAs ? "-f" : "",
        saveImageAs,
        // CUSTOM WIDTH
        customWidth ? "-w" : "",
        customWidth ? customWidth : "",
        // COMPRESSION
        compression ? "-c" : "",
        compression ? compression : "",
        // TILE SIZE
        tileSize ? "-t" : "",
        tileSize ? tileSize : "",
        // SIZE WIDTHxHEIGHT
        dimension ? "-r" : "",
        dimension ? dimension : "",
    ];
};
var spawnUpscayl = function (command) {
    console.log("command: ".concat(execPath, " ").concat(command.join(" ")));
    var spawnedProcess = (0, child_process_1.spawn)(execPath, command.filter(function (arg) { return arg !== ""; }), {
        cwd: undefined,
        detached: false,
    });
    return {
        process: spawnedProcess,
        kill: function () { return spawnedProcess.kill(); },
    };
};
var upscayl = function (_a) {
    var inputDir = _a.inputDir, outputDir = _a.outputDir, modelsPath = _a.modelsPath, model = _a.model, gpuId = _a.gpuId, saveImageAs = _a.saveImageAs, scale = _a.scale, customWidth = _a.customWidth, compression = _a.compression, tileSize = _a.tileSize, dimension = _a.dimension;
    var command = getBatchArguments({
        inputDir: inputDir,
        outputDir: outputDir,
        modelsPath: modelsPath,
        model: model,
        gpuId: gpuId,
        saveImageAs: saveImageAs,
        scale: scale,
        customWidth: customWidth,
        compression: compression,
        tileSize: tileSize,
        dimension: dimension,
    });
    return spawnUpscayl(command);
};
var TIMEOUT = 1200000; // 1200 seconds
/**
 * Upscales an image using the specified model and scale.
 *
 * @param {ScaleOptions} options - The options for upscaling the image.
 * @param {Buffer} options.image - The input image buffer.
 * @param {ModelName} options.model - The model to use for upscaling.
 * @param {number} options.scale - The desired scale of the output image.
 * @param {number} [options.timeout=TIMEOUT] - The timeout in milliseconds for the upscaling process.
 * @return {Promise<Buffer>} A promise that resolves with the upscaled image buffer.
 */
function upscaleOneImageByScale(_a) {
    var image = _a.image, model = _a.model, saveImageAs = _a.saveImageAs, scale = _a.scale, _b = _a.timeout, timeout = _b === void 0 ? TIMEOUT : _b;
    return new Promise(function (resolve, reject) {
        var rootPath = __dirname;
        var filename = "image.png";
        var inputFolderPath = "".concat(rootPath, "/public/images/").concat(filename);
        var outputFolderPath = "".concat(rootPath, "/public/app/upscale/output/").concat(filename);
        // some code to write the image to disk
        (0, fs_1.writeFileSync)(inputFolderPath, Buffer.from(image));
        // upscale the image
        var upscale = upscayl({
            inputDir: inputFolderPath,
            outputDir: outputFolderPath,
            modelsPath: MODEL_PATH,
            model: model,
            gpuId: "",
            saveImageAs: saveImageAs,
            scale: scale,
            customWidth: "",
            compression: "",
            tileSize: "",
            dimension: "",
        });
        var isDone = false;
        // listen on data event
        upscale.process.stderr.on("data", function (data) {
            var dataBuffer = Buffer.from(data);
            var utf16Decoder = new TextDecoder("UTF-8");
            var response = utf16Decoder.decode(dataBuffer);
            console.log("ðŸš€ ~ UpscaleAPIService ~ upscale ~ stderr:", response);
        });
        // listen on end event
        upscale.process.stderr.on("end", function () {
            console.log("ðŸš€ ~ UpscaleAPIService ~ upscale ~ end:");
            isDone = true;
            upscale.kill();
            var imageBuffer = (0, fs_1.readFileSync)(outputFolderPath);
            resolve(imageBuffer);
        });
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var func = setTimeout(function () {
            if (!isDone) {
                upscale.kill();
                reject(new Error("Timeout: Process took too long"));
            }
        }, timeout);
    });
}
/**
 * Upscales an image using the specified model and width.
 *
 * @param {WidthOptions} options - The options for upscaling the image.
 * @param {Buffer} options.image - The input image buffer.
 * @param {ModelName} options.model - The model to use for upscaling.
 * @param {string} options.width - The desired width of the output image.
 * @param {number} [options.timeout=TIMEOUT] - The timeout in milliseconds for the upscaling process.
 * @return {Promise<Buffer>} A promise that resolves with the upscaled image buffer.
 */
function upscaleOneImageByWidth(_a) {
    var image = _a.image, model = _a.model, saveImageAs = _a.saveImageAs, width = _a.width, _b = _a.timeout, timeout = _b === void 0 ? TIMEOUT : _b;
    return new Promise(function (resolve, reject) {
        var rootPath = __dirname;
        var filename = "image.png";
        var inputFolderPath = "".concat(rootPath, "/public/images/").concat(filename);
        var outputFolderPath = "".concat(rootPath, "/public/app/upscale/output/").concat(filename);
        // some code to write the image to disk
        (0, fs_1.writeFileSync)(inputFolderPath, Buffer.from(image));
        // upscale the image
        var upscale = upscayl({
            inputDir: inputFolderPath,
            outputDir: outputFolderPath,
            modelsPath: MODEL_PATH,
            model: model,
            gpuId: "",
            saveImageAs: saveImageAs,
            scale: "",
            customWidth: width,
            compression: "",
            tileSize: "",
            dimension: "",
        });
        var isDone = false;
        // listen on data event
        upscale.process.stderr.on("data", function (data) {
            var dataBuffer = Buffer.from(data);
            var utf16Decoder = new TextDecoder("UTF-8");
            var response = utf16Decoder.decode(dataBuffer);
            console.log("ðŸš€ ~ UpscaleAPIService ~ upscale ~ stderr:", response);
        });
        // listen on end event
        upscale.process.stderr.on("end", function () {
            console.log("ðŸš€ ~ UpscaleAPIService ~ upscale ~ end:");
            isDone = true;
            upscale.kill();
            var imageBuffer = (0, fs_1.readFileSync)(outputFolderPath);
            resolve(imageBuffer);
        });
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var func = setTimeout(function () {
            if (!isDone) {
                upscale.kill();
                reject(new Error("Timeout: Process took too long"));
            }
        }, timeout);
    });
}
/**
 * Upscales an image using the specified model and dimensions.
 *
 * @param {DimensionOptions} options - The options for upscaling the image.
 * @param {Buffer} options.image - The input image buffer.
 * @param {ModelName} options.model - The model to use for upscaling.
 * @param {number} options.width - The desired width of the output image.
 * @param {number} options.height - The desired height of the output image.
 * @param {number} [options.timeout=TIMEOUT] - The timeout in milliseconds for the upscaling process.
 * @return {Promise<Buffer>} A promise that resolves with the upscaled image buffer.
 */
function upscaleOneImageByDimension(_a) {
    var image = _a.image, model = _a.model, saveImageAs = _a.saveImageAs, width = _a.width, height = _a.height, _b = _a.timeout, timeout = _b === void 0 ? TIMEOUT : _b;
    return new Promise(function (resolve, reject) {
        var rootPath = __dirname;
        var filename = "image.png";
        var inputFolderPath = "".concat(rootPath, "/public/images/").concat(filename);
        var outputFolderPath = "".concat(rootPath, "/public/app/upscale/output/").concat(filename);
        // some code to write the image to disk
        (0, fs_1.writeFileSync)(inputFolderPath, Buffer.from(image));
        // upscale the image
        var upscale = upscayl({
            inputDir: inputFolderPath,
            outputDir: outputFolderPath,
            modelsPath: MODEL_PATH,
            model: model,
            gpuId: "",
            saveImageAs: saveImageAs,
            scale: "",
            customWidth: "",
            compression: "",
            tileSize: "",
            dimension: "".concat(width, "x").concat(height),
        });
        var isDone = false;
        // listen on data event
        upscale.process.stderr.on("data", function (data) {
            var dataBuffer = Buffer.from(data);
            var utf16Decoder = new TextDecoder("UTF-8");
            var response = utf16Decoder.decode(dataBuffer);
            console.log("ðŸš€ ~ UpscaleAPIService ~ upscale ~ stderr:", response);
        });
        // listen on end event
        upscale.process.stderr.on("end", function () {
            console.log("ðŸš€ ~ UpscaleAPIService ~ upscale ~ end:");
            isDone = true;
            upscale.kill();
            var imageBuffer = (0, fs_1.readFileSync)(outputFolderPath);
            resolve(imageBuffer);
        });
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var func = setTimeout(function () {
            if (!isDone) {
                upscale.kill();
                reject(new Error("Timeout: Process took too long"));
            }
        }, timeout);
    });
}
