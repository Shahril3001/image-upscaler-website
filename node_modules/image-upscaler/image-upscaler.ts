import { spawn } from "child_process";
import {
  DimensionOptions,
  Options,
  ScaleOptions,
  WidthOptions,
} from "./image-upscaler.interface";
import { join, resolve } from "path";
import { writeFileSync, readFileSync } from "fs";

const getCurrentOs = () => {
  const platform = process.platform;
  if (platform === "win32") return "window";
  if (platform === "darwin") return "mac";
  if (platform === "linux") return "linux";
  return "Unknown";
};

const getBinaryPath = (os: string) => {
  return resolve(join(__dirname, "resources", os, "bin"));
};

const platform = getCurrentOs();
const binariesPath = getBinaryPath(platform);
const execPath = resolve(join(binariesPath, `./upscayl-bin`));
const MODEL_PATH = "../../../resources/models";

const getBatchArguments = ({
  inputDir,
  outputDir,
  modelsPath,
  model,
  gpuId,
  saveImageAs,
  scale,
  customWidth,
  compression,
  tileSize,
  dimension,
}: Options) => {
  return [
    // INPUT IMAGE
    "-i",
    inputDir,
    // OUTPUT IMAGE
    "-o",
    outputDir,
    // OUTPUT SCALE
    scale ? "-s" : "",
    scale ? scale : "",
    // MODELS PATH
    modelsPath ? "-m" : "",
    modelsPath,
    // MODEL NAME
    model ? "-n" : "",
    model,
    // GPU ID
    gpuId ? `-g` : "",
    gpuId ? gpuId : "",
    // FORMAT
    saveImageAs ? "-f" : "",
    saveImageAs,
    // CUSTOM WIDTH
    customWidth ? `-w` : "",
    customWidth ? customWidth : "",
    // COMPRESSION
    compression ? "-c" : "",
    compression ? compression : "",
    // TILE SIZE
    tileSize ? `-t` : "",
    tileSize ? tileSize : "",
    // SIZE WIDTHxHEIGHT
    dimension ? "-r" : "",
    dimension ? dimension : "",
  ];
};

const spawnUpscayl = (command: string[]) => {
  console.log(`command: ${execPath} ${command.join(" ")}`);
  const spawnedProcess = spawn(
    execPath,
    command.filter((arg) => arg !== ""),
    {
      cwd: undefined,
      detached: false,
    }
  );

  return {
    process: spawnedProcess,
    kill: () => spawnedProcess.kill(),
  };
};

const upscayl = ({
  inputDir,
  outputDir,
  modelsPath,
  model,
  gpuId,
  saveImageAs,
  scale,
  customWidth,
  compression,
  tileSize,
  dimension,
}: Options) => {
  const command = getBatchArguments({
    inputDir,
    outputDir,
    modelsPath,
    model,
    gpuId,
    saveImageAs,
    scale,
    customWidth,
    compression,
    tileSize,
    dimension,
  });
  return spawnUpscayl(command);
};

const TIMEOUT = 1200000; // 1200 seconds

/**
 * Upscales an image using the specified model and scale.
 *
 * @param {ScaleOptions} options - The options for upscaling the image.
 * @param {Buffer} options.image - The input image buffer.
 * @param {ModelName} options.model - The model to use for upscaling.
 * @param {number} options.scale - The desired scale of the output image.
 * @param {number} [options.timeout=TIMEOUT] - The timeout in milliseconds for the upscaling process.
 * @return {Promise<Buffer>} A promise that resolves with the upscaled image buffer.
 */
export function upscaleOneImageByScale({
  image,
  model,
  saveImageAs,
  scale,
  timeout: timeout = TIMEOUT,
}: ScaleOptions): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    const rootPath = __dirname;
    const filename = "image.png";
    const inputFolderPath = `${rootPath}/public/images/${filename}`;
    const outputFolderPath = `${rootPath}/public/app/upscale/output/${filename}`;

    // some code to write the image to disk
    writeFileSync(inputFolderPath, Buffer.from(image));

    // upscale the image
    const upscale = upscayl({
      inputDir: inputFolderPath,
      outputDir: outputFolderPath,
      modelsPath: MODEL_PATH,
      model,
      gpuId: "",
      saveImageAs: saveImageAs,
      scale: scale,
      customWidth: "",
      compression: "",
      tileSize: "",
      dimension: "",
    });
    let isDone = false;

    // listen on data event
    upscale.process.stderr.on("data", (data) => {
      const dataBuffer = Buffer.from(data);
      const utf16Decoder = new TextDecoder("UTF-8");
      const response = utf16Decoder.decode(dataBuffer);
      console.log("ðŸš€ ~ UpscaleAPIService ~ upscale ~ stderr:", response);
    });

    // listen on end event
    upscale.process.stderr.on("end", () => {
      console.log("ðŸš€ ~ UpscaleAPIService ~ upscale ~ end:");
      isDone = true;
      upscale.kill();
      const imageBuffer: Buffer = readFileSync(outputFolderPath);
      resolve(imageBuffer);
    });

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const func = setTimeout(() => {
      if (!isDone) {
        upscale.kill();
        reject(new Error("Timeout: Process took too long"));
      }
    }, timeout);
  });
}

/**
 * Upscales an image using the specified model and width.
 *
 * @param {WidthOptions} options - The options for upscaling the image.
 * @param {Buffer} options.image - The input image buffer.
 * @param {ModelName} options.model - The model to use for upscaling.
 * @param {string} options.width - The desired width of the output image.
 * @param {number} [options.timeout=TIMEOUT] - The timeout in milliseconds for the upscaling process.
 * @return {Promise<Buffer>} A promise that resolves with the upscaled image buffer.
 */
export function upscaleOneImageByWidth({
  image,
  model,
  saveImageAs,
  width,
  timeout: timeout = TIMEOUT,
}: WidthOptions): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    const rootPath = __dirname;
    const filename = "image.png";
    const inputFolderPath = `${rootPath}/public/images/${filename}`;
    const outputFolderPath = `${rootPath}/public/app/upscale/output/${filename}`;

    // some code to write the image to disk
    writeFileSync(inputFolderPath, Buffer.from(image));

    // upscale the image
    const upscale = upscayl({
      inputDir: inputFolderPath,
      outputDir: outputFolderPath,
      modelsPath: MODEL_PATH,
      model,
      gpuId: "",
      saveImageAs: saveImageAs,
      scale: "",
      customWidth: width,
      compression: "",
      tileSize: "",
      dimension: "",
    });
    let isDone = false;

    // listen on data event
    upscale.process.stderr.on("data", (data) => {
      const dataBuffer = Buffer.from(data);
      const utf16Decoder = new TextDecoder("UTF-8");
      const response = utf16Decoder.decode(dataBuffer);
      console.log("ðŸš€ ~ UpscaleAPIService ~ upscale ~ stderr:", response);
    });

    // listen on end event
    upscale.process.stderr.on("end", () => {
      console.log("ðŸš€ ~ UpscaleAPIService ~ upscale ~ end:");
      isDone = true;
      upscale.kill();
      const imageBuffer: Buffer = readFileSync(outputFolderPath);
      resolve(imageBuffer);
    });

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const func = setTimeout(() => {
      if (!isDone) {
        upscale.kill();
        reject(new Error("Timeout: Process took too long"));
      }
    }, timeout);
  });
}
/**
 * Upscales an image using the specified model and dimensions.
 *
 * @param {DimensionOptions} options - The options for upscaling the image.
 * @param {Buffer} options.image - The input image buffer.
 * @param {ModelName} options.model - The model to use for upscaling.
 * @param {number} options.width - The desired width of the output image.
 * @param {number} options.height - The desired height of the output image.
 * @param {number} [options.timeout=TIMEOUT] - The timeout in milliseconds for the upscaling process.
 * @return {Promise<Buffer>} A promise that resolves with the upscaled image buffer.
 */

export function upscaleOneImageByDimension({
  image,
  model,
  saveImageAs,
  width,
  height,
  timeout: timeout = TIMEOUT,
}: DimensionOptions): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    const rootPath = __dirname;
    const filename = "image.png";
    const inputFolderPath = `${rootPath}/public/images/${filename}`;
    const outputFolderPath = `${rootPath}/public/app/upscale/output/${filename}`;

    // some code to write the image to disk
    writeFileSync(inputFolderPath, Buffer.from(image));

    // upscale the image
    const upscale = upscayl({
      inputDir: inputFolderPath,
      outputDir: outputFolderPath,
      modelsPath: MODEL_PATH,
      model,
      gpuId: "",
      saveImageAs: saveImageAs,
      scale: "",
      customWidth: "",
      compression: "",
      tileSize: "",
      dimension: `${width}x${height}`,
    });
    let isDone = false;

    // listen on data event
    upscale.process.stderr.on("data", (data) => {
      const dataBuffer = Buffer.from(data);
      const utf16Decoder = new TextDecoder("UTF-8");
      const response = utf16Decoder.decode(dataBuffer);
      console.log("ðŸš€ ~ UpscaleAPIService ~ upscale ~ stderr:", response);
    });

    // listen on end event
    upscale.process.stderr.on("end", () => {
      console.log("ðŸš€ ~ UpscaleAPIService ~ upscale ~ end:");
      isDone = true;
      upscale.kill();
      const imageBuffer: Buffer = readFileSync(outputFolderPath);
      resolve(imageBuffer);
    });

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const func = setTimeout(() => {
      if (!isDone) {
        upscale.kill();
        reject(new Error("Timeout: Process took too long"));
      }
    }, timeout);
  });
}
